from django.test import TestCase
from django.conf import settings
from django.contrib.gis.geos import GEOSGeometry

from utils import TestSettingsManager
from models import *

from maps.fields import *

mgr = TestSettingsManager()
INSTALLED_APPS = list(settings.INSTALLED_APPS)
INSTALLED_APPS.append('maps.tests')
mgr.set(INSTALLED_APPS=INSTALLED_APPS)


class FlatCollectionTest(TestCase):
    def test_flatten(self):
        # A geometry collection with a bunch of stuff inside of a
        # rectangle.  And a few items outside of it.
        geom = GEOSGeometry("""{ "type": "GeometryCollection", "geometries": [ { "type": "Polygon", "coordinates": [ [ [ -122.443056, 37.787064 ], [ -122.443056, 37.758434 ], [ -122.400999, 37.757891 ], [ -122.403402, 37.787742 ], [ -122.443056, 37.787064 ] ] ] }, { "type": "Point", "coordinates": [ -122.434816, 37.784758 ] }, { "type": "Point", "coordinates": [ -122.410612, 37.781909 ] }, { "type": "Point", "coordinates": [ -122.432241, 37.766983 ] }, { "type": "Point", "coordinates": [ -122.409754, 37.768747 ] }, { "type": "LineString", "coordinates": [ [ -122.415075, 37.784351 ], [ -122.425890, 37.765083 ], [ -122.427435, 37.779466 ] ] }, { "type": "Polygon", "coordinates": [ [ [ -122.438765, 37.778788 ], [ -122.439966, 37.763726 ], [ -122.457132, 37.772139 ], [ -122.438765, 37.778788 ] ] ] }, { "type": "Point", "coordinates": [ -122.415762, 37.792762 ] }, { "type": "Point", "coordinates": [ -122.430696, 37.791541 ] }, { "type": "LineString", "coordinates": [ [ -122.397394, 37.790727 ], [ -122.395849, 37.754498 ], [ -122.448549, 37.761962 ] ] } ] }""", srid=4326)
        # A geometry collection with nothing inside the rectangle and a
        # few items outside of it.
        expected_geom = GEOSGeometry("""{ "type": "GeometryCollection", "geometries": [ { "type": "Polygon", "coordinates": [ [ [ -122.443056, 37.765240 ], [ -122.457132, 37.772139 ], [ -122.443056, 37.777235 ], [ -122.443056, 37.787064 ], [ -122.403402, 37.787742 ], [ -122.400999, 37.757891 ], [ -122.443056, 37.758434 ], [ -122.443056, 37.765240 ] ] ] }, { "type": "Point", "coordinates": [ -122.415762, 37.792762 ] }, { "type": "Point", "coordinates": [ -122.430696, 37.791541 ] }, { "type": "LineString", "coordinates": [ [ -122.397394, 37.790727 ], [ -122.395849, 37.754498 ], [ -122.448549, 37.761962 ] ] } ] }""", srid=4326)
        self.assertTrue(flatten_collection(geom).equals(expected_geom) or
                        flatten_collection(geom).equals_exact(expected_geom, 0.001))

        # A point, a line and a triangle, none overlapping.
        geom = GEOSGeometry("""{ "type": "GeometryCollection", "geometries": [ { "type": "Point", "coordinates": [ -122.435760, 37.786250 ] }, { "type": "LineString", "coordinates": [ [ -122.428036, 37.784215 ], [ -122.399883, 37.782180 ] ] }, { "type": "Polygon", "coordinates": [ [ [ -122.441597, 37.774853 ], [ -122.442627, 37.755855 ], [ -122.404861, 37.763048 ], [ -122.441597, 37.774853 ] ] ] } ] }""", srid=4326)
        # Should stay the same.
        self.assertTrue(flatten_collection(geom).equals(geom) or
                        flatten_collection(geom).equals_exact(geom, 0.001))

        # Two triangles, both containing a triangle and with an
        # overlapping triangle.
        geom = GEOSGeometry("""{ "type": "GeometryCollection", "geometries": [ { "type": "Polygon", "coordinates": [ [ [ -122.445459, 37.761555 ], [ -122.404604, 37.753955 ], [ -122.415075, 37.789099 ], [ -122.445459, 37.761555 ] ] ] }, { "type": "Polygon", "coordinates": [ [ [ -122.456617, 37.785707 ], [ -122.448549, 37.775667 ], [ -122.437220, 37.787878 ], [ -122.456617, 37.785707 ] ] ] }, { "type": "Polygon", "coordinates": [ [ [ -122.451296, 37.784351 ], [ -122.448549, 37.778788 ], [ -122.443399, 37.785165 ], [ -122.451296, 37.784351 ] ] ] }, { "type": "Polygon", "coordinates": [ [ [ -122.418852, 37.777160 ], [ -122.434816, 37.764676 ], [ -122.411642, 37.759926 ], [ -122.418852, 37.777160 ] ] ] }, { "type": "Polygon", "coordinates": [ [ [ -122.409582, 37.783265 ], [ -122.422113, 37.774311 ], [ -122.399454, 37.774582 ], [ -122.409582, 37.783265 ] ] ] }, { "type": "Polygon", "coordinates": [ [ [ -122.449751, 37.790727 ], [ -122.447348, 37.783265 ], [ -122.440310, 37.792219 ], [ -122.449751, 37.790727 ] ] ] } ] }""", srid=4326)
        # Two polygons.
        expected_geom = GEOSGeometry("""{ "type": "GeometryCollection", "geometries": [ { "type": "MultiPolygon", "coordinates": [ [ [ [ -122.410710, 37.774447 ], [ -122.404604, 37.753955 ], [ -122.445459, 37.761555 ], [ -122.415075, 37.789099 ], [ -122.412678, 37.781053 ], [ -122.409582, 37.783265 ], [ -122.399454, 37.774582 ], [ -122.410710, 37.774447 ] ] ], [ [ [ -122.444349, 37.787080 ], [ -122.437220, 37.787878 ], [ -122.448549, 37.775667 ], [ -122.456617, 37.785707 ], [ -122.448429, 37.786624 ], [ -122.449751, 37.790727 ], [ -122.440310, 37.792219 ], [ -122.444349, 37.787080 ] ] ] ] } ] }""", srid=4326)
        self.assertTrue(flatten_collection(geom).equals(expected_geom) or
                        flatten_collection(geom).equals_exact(expected_geom, 0.001))

class CollectionFromTest(TestCase):
    def test_components_to_collection(self):
        points = GEOSGeometry("""MULTIPOINT (-122.4378964233400069 37.7971758820830033, -122.3929211425700032 37.7688207875790027, -122.3908612060599950 37.7883584775320003, -122.4056240844700056 37.8013807351830025, -122.4148937988299934 37.8002956347170027, -122.4183270263600036 37.8051784612779969)""")
        lines = GEOSGeometry("""MULTILINESTRING ((-122.3987576293999950 37.7792686669340014, -122.4200436401300038 37.7635284412720011, -122.4485394287000020 37.7396403216109988, -122.4557492065400055 37.7819821602790000, -122.4021908569300052 37.7912072925280000, -122.4190136718799948 37.7730272542180003))""")
        polys = GEOSGeometry("""MULTIPOLYGON (((-122.4186703491200063 37.7445271552870025, -122.4262234497099939 37.7282364550709985, -122.3939511108400069 37.7257925408749983, -122.4028775024400062 37.7561999519359972, -122.4186703491200063 37.7445271552870025))))""")
        m = MapInfo(points=points, lines=lines, polys=polys)
        m.save()

        for point in points:
            self.assertTrue(m.geom.contains(point))
        for line in lines:
            self.assertTrue(m.geom.contains(line))
        for poly in polys:
            self.assertTrue(m.geom.contains(poly))

    def test_collection_to_components(self):
        points = GEOSGeometry("""MULTIPOINT (-122.4378964233400069 37.7971758820830033, -122.3929211425700032 37.7688207875790027, -122.3908612060599950 37.7883584775320003, -122.4056240844700056 37.8013807351830025, -122.4148937988299934 37.8002956347170027, -122.4183270263600036 37.8051784612779969)""")
        lines = GEOSGeometry("""MULTILINESTRING ((-122.3987576293999950 37.7792686669340014, -122.4200436401300038 37.7635284412720011, -122.4485394287000020 37.7396403216109988, -122.4557492065400055 37.7819821602790000, -122.4021908569300052 37.7912072925280000, -122.4190136718799948 37.7730272542180003))""")
        polys = GEOSGeometry("""MULTIPOLYGON (((-122.4186703491200063 37.7445271552870025, -122.4262234497099939 37.7282364550709985, -122.3939511108400069 37.7257925408749983, -122.4028775024400062 37.7561999519359972, -122.4186703491200063 37.7445271552870025))))""")
        m = MapInfo(points=points, lines=lines, polys=polys)
        m.save()

        p1 = GEOSGeometry("""POINT (-122.4039926308399941 37.7880240949070014)""")
        p2 = GEOSGeometry("""POINT (-122.4048884886500019 37.7874517724849994)""")
        poly1 = GEOSGeometry("""POLYGON ((-122.4050789255000069 37.7871274544770017, -122.4041455167500061 37.7869748337460010, -122.4046712297199946 37.7868561285159998, -122.4058621305299965 37.7868179732230018, -122.4050789255000069 37.7871274544770017))""")
        poly2 = GEOSGeometry("""POLYGON ((-122.4061571735200005 37.7873182299479993, -122.4051057475799951 37.7874920471699980, -122.4053095954700012 37.7872843143450012, -122.4059104102900051 37.7870214678929983, -122.4061571735200005 37.7873182299479993))""")
        poly3 = GEOSGeometry("""POLYGON ((-122.4042258443199955 37.7877467249520009, -122.4040060418899998 37.7877930467579972, -122.4037592786600044 37.7878100044460012, -122.4038987535199965 37.7872546381790002, -122.4041696326100066 37.7875516640719979, -122.4045639413700002 37.7871104966339999, -122.4047439944800004 37.7876334274239980, -122.4051074990999979 37.7877999621279983, -122.4051754850199956 37.7877040188390012, -122.4052373761700068 37.7877464947830006, -122.4056904691500023 37.7874623710879973, -122.4059479612199937 37.7878863139879968, -122.4055112298700010 37.7879849258999982, -122.4056985157699984 37.7880707283909985, -122.4055329433499963 37.7880688591190008, -122.4055617231099973 37.7881110027390008, -122.4052503139999999 37.7880656683040002, -122.4045719879899963 37.7880580101709995, -122.4045764472599984 37.7879205702350021, -122.4045263904399974 37.7879668628640033, -122.4042258443199955 37.7877467249520009))""")
        # geom is really just p1+p2+poly1+poly2+poly3
        geom = GEOSGeometry("""GEOMETRYCOLLECTION (POINT (-122.4039926308399941 37.7880240949070014), POINT (-122.4048884886500019 37.7874517724849994), POLYGON ((-122.4050789255000069 37.7871274544770017, -122.4041455167500061 37.7869748337460010, -122.4046712297199946 37.7868561285159998, -122.4058621305299965 37.7868179732230018, -122.4050789255000069 37.7871274544770017)), POLYGON ((-122.4061571735200005 37.7873182299479993, -122.4051057475799951 37.7874920471699980, -122.4053095954700012 37.7872843143450012, -122.4059104102900051 37.7870214678929983, -122.4061571735200005 37.7873182299479993)), POLYGON ((-122.4042258443199955 37.7877467249520009, -122.4040060418899998 37.7877930467579972, -122.4037592786600044 37.7878100044460012, -122.4038987535199965 37.7872546381790002, -122.4041696326100066 37.7875516640719979, -122.4045639413700002 37.7871104966339999, -122.4047439944800004 37.7876334274239980, -122.4051074990999979 37.7877999621279983, -122.4051754850199956 37.7877040188390012, -122.4052373761700068 37.7877464947830006, -122.4056904691500023 37.7874623710879973, -122.4059479612199937 37.7878863139879968, -122.4055112298700010 37.7879849258999982, -122.4056985157699984 37.7880707283909985, -122.4055329433499963 37.7880688591190008, -122.4055617231099973 37.7881110027390008, -122.4052503139999999 37.7880656683040002, -122.4045719879899963 37.7880580101709995, -122.4045764472599984 37.7879205702350021, -122.4045263904399974 37.7879668628640033, -122.4042258443199955 37.7877467249520009)))""")
        m.geom = geom
        m.save()

        # The components should have been set correctly.
        self.assertTrue(m.points.contains(p1))
        self.assertTrue(m.points.contains(p2))
        self.assertTrue(m.polys.contains(poly1))
        self.assertTrue(m.polys.contains(poly2))
        self.assertTrue(m.polys.contains(poly3))
        # Lines should be set to None
        self.assertEqual(m.lines, None)
